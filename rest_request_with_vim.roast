# https://github.com/sharat87/roast.vim
# Could be properly used only with Vim, not NeoVim

# Press ENTER to perform the HTTP Request
# <c-j> / <c-k> to toogle between displays.

# ————————————————————————
# Roast plugin variables |
# ————————————————————————

set root http://127.0.0.1:8080

# —————————————
# HTTP HEADERS |
# —————————————

Accept: application/json, text/plain
Accept-Encoding: identity
content-type: application/json

# ————————————————————————————————————————————
# REQUEST TO RETRIEVE AUTHENTIFICATION TOKEN  |
# ————————————————————————————————————————————

POST {root}/api/authenticate << END
{{"username":"admin","password":"admin","rememberMe":true}}
END

POST {root}/api/authenticate << END
{{"username":"user","password":"user","rememberMe":true}}
END

POST {root}/api/authenticate << END
{{"username":"admin","password":"admine","rememberMe":false}}
END
# Update the string following "Bearer" with the authentification token
# retrieved by the request to retrieve authentification token (see above).

# ———————————————
# TOKEN          ]
# ———————————————

# NOTE: if you want to be admin, uncomment the first one and comment the second
# one. If you want to be a normal user, do the opposite

# AUTHORIZATION FOR ADMIN
# Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJBRE1JTl9HUk9VUCIsImV4cCI6MTU2MTE5MTgzMn0.HjNKAieaTr5b9ELyzTfIYakfDhQdvRybs-KGH7jZMw1cnyk6z2pNIrEAW8teTvL_3DMEAIbFEC7_vbX5vBMyDg

# TOKEN OUT OF DATE FOR ADMIN, the Spring Security Role hash in the token is out
# of date (this role is not in the Database);
# (behaviour could be test with "/api/register")
# ERROR 409 (Conflict)
# Actually, tested only when we need
# `UserRDF.UserGroup.ADMIN_GROUP.toString()` credentials.
# No need to test for
# `UserRDF.UserGroup.NORMAL_USER_GROUP.toString()` as actually it no needs
# any particular authorization
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOLFJPTEVfVVNFUiIsImV4cCI6MTU2MDY5MDkyOH0.rI26xUSMEwpObbEo8TYR3K6aDZCu53sXnWB_cQ3Ixi9j-sqe3PhZppnC1Gs-walzw84Z3wmz_oKRWQOBmZatSg

# AUTHORIZATION FOR USER
# Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyIiwiYXV0aCI6IlJPTEVfVVNFUiIsImV4cCI6MTU1OTY2ODIxM30.o-iAHZIJYskQE6yDan24MhwF9JhkJIQ5-3rp6J8OxUVyT2u_173sW7COv3390BVtA3UCAiilyJnAREPFAKuu3g

# ———————————————
# ERROR 404 not found ]
# ———————————————

GET {root}/api/jioejiewijweiojfeji

# —————————————————————
# Fuseki Administration ]
# —————————————————————

# Start Fuseki (restart if there already a Fuseki Server Standalone).
# Use ./FusekiStop.sh to stop Fuseki if it exists,
# between two restarts of Spring Devtools for instance.
GET {root}/api/startFusekiProcess

# Stop Fuseki
# The kill is done by Jaba thanks FusekiServerConn.fusekiProcess.
# `FusekiServerConn.fusekiProcess.descendants().forEach(ProcessHandle::destroy)`
GET {root}/api/stopFusekiProcess

# Restart Fuseki
# Trigger stopFusekiProcess then startFusekiProcess
# Contrary to `{root}/api/startFusekiProcess`, stop the thread that
# bind output of the Standalone FusekiServer with the stdout of the current
# Java Application.
GET {root}/api/restartFusekiProcess

# ————————————————
# LIST SUBCLASS OF ]
# ————————————————

GET {root}/api/rdfquery_listsubclassof

GET {root}/api/rdfquery_listsubclassof/Depiction

GET {root}/api/rdfquery_listsubclassof/Photo

GET {root}/api/rdfquery_listsubclassof/Person

# ERROR 404 not found
GET {root}/api/rdfquery_listsubclassof/jioejiewijweiojfeji

# ——————
# USERS ]
# ——————

# CREATE / UPDATE
# ———————————————
# Create a userRDF of the user currently logged
# ACTUALLY CAN'T UPDATE WITH IT.
GET {root}/api/createInitialUser

PUT {root}/api/register << END
{{"login":"admin2","password":"admin2","userGroup":"ADMIN_GROUP"}}
END
# READ
# —————
GET {root}/api/userRDF/admin

# UserGroup.USER_GROUP
GET {root}/api/userRDF/user


# DELETE
# ———————
# TODO test it, if it's delete Photos and Albums too
DELETE {root}/api/userRDF/user

DELETE {root}/api/userRDF/admin

DELETE {root}/api/userRDF/admin2

# ———————
# ALBUM |
# ———————

# CREATE / UPDATE
# ———————————————

# TODO differenciate create and update with http codes

# BIG TODO, when we update, it accumulate. Delete before update and test.

# Should work if the user with login `user' or `admin' is logged
PUT {root}/api/albumRDF << END
{{
    "id": 1,
    "ownerLogin": "user"
}}
END

# ERROR 400, should not be serialized
PUT {root}/api/albumRDF << END
{{
    "id": 1
}}
END

# ERROR 404 as notexistuser doesn't exist
PUT {root}/api/albumRDF << END
{{
    "id": 2,
    "ownerLogin": "notexistuser"
}}
END

# ERROR 403 if the user logged is `user`
PUT {root}/api/albumRDF << END
{{
    "id": 2,
    "ownerLogin": "admin"
}}
END

# READ
# —————
GET {root}/api/albumRDF/1

# ERROR 403 if the user logged is `user` (as the ownerLogin is admin)
GET {root}/api/albumRDF/2

# ERROR 404 not found
GET {root}/api/albumRDF/999999

# DELETE
# ———————
DELETE {root}/api/albumRDF/1

DELETE {root}/api/albumRDF/2

# ——————
# PHOTO |
# ——————

# CREATE / UPDATE
# ———————————————

PUT {root}/api/photoRDF << END
{{
    "id": 1,
    "albumId": 1,
    "depiction": []
}}
END

PUT {root}/api/photoRDF << END
{{
    "id": 1,
    "albumId": 1,
    "depiction": [ {{"depiction": "Animal", "literals": ["Medor"]}} ]
}}
END

PUT {root}/api/photoRDF << END
{{
    "id": 1,
    "albumId": 1,
    "depiction": [
        {{"depiction":
             "Person",
             "literals": [
                 "Theo",
                "Alban",
                "Auguste",
                "Xavier"
             ]
         }},
        {{"depiction": "Animal", "literals": ["Medor"]}},
        {{"depiction": "Animal", "literals": ["Titi"]}}
    ]
}}
END

# READ
# —————

GET {root}/api/photoRDF/1

# DELETE
# ——————

DELETE {root}/api/photoRDF/1

